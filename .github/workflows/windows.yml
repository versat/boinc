# This file is part of BOINC.
# http://boinc.berkeley.edu
# Copyright (C) 2023 University of California
#
# BOINC is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# BOINC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with BOINC.  If not, see <http://www.gnu.org/licenses/>.

name: Windows
on:
  push:
    branches: [ master, 'client_release/**' ]
    tags: [ 'client_release/**' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '0 0 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: ${{secrets.S3_ACCESS_KEY}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.S3_SECRET_KEY}}
  AWS_DEFAULT_REGION: us-west-2

jobs:
  build:
    name: ${{matrix.configuration}}-${{matrix.platform}}-${{matrix.type}}
    runs-on: windows-2022
    strategy:
      matrix:
        type: [libs-cmake, msbuild]
        platform: [x64, ARM64]
        configuration: [Release]
      fail-fast: false
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Download OpenCppCoverage
        uses: suisei-cn/actions-download-file@v1
        if: success() && matrix.platform == 'x64'
        id: DownloadOpenCppCoverage
        with:
          url: "https://opencppcoverage.gallerycdn.vsassets.io/extensions/opencppcoverage/opencppcoverageplugin/0.9.7.1/1581265346391/OpenCppCoverage-0.9.7.1.vsix"
          target: ${{github.workspace}}\temp\

      - name: Unzip OpenCppCoverage
        if: success() && matrix.platform == 'x64'
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: ${{github.workspace}}\temp\OpenCppCoverage-0.9.7.1.vsix
          pathTarget: ${{github.workspace}}\temp\OpenCppCoverage

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Check if build is running from origin repo
        if: ${{success() && env.AWS_ACCESS_KEY_ID != 0 && env.AWS_SECRET_ACCESS_KEY != 0}}
        run: |
          echo "VCPKG_BINARY_SOURCES=clear;x-aws,s3://vcpkg.cache.boinc/,readwrite" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Check if build is running from fork
        if: ${{success() && (env.AWS_ACCESS_KEY_ID == 0 || env.AWS_SECRET_ACCESS_KEY == 0)}}
        run: |
          echo "VCPKG_BINARY_SOURCES=clear;x-aws-config,no-sign-request;x-aws,s3://vcpkg.cache.boinc/,read" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Fix vcpkg
        run: vcpkg.exe integrate remove

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}\3rdParty\Windows\cuda\
          key: windows-${{matrix.platform}}-${{matrix.configuration}}-${{hashFiles('win_build/vcpkg_3rdparty_dependencies.vcxproj', '.github/workflows/windows.yml')}}

      - name: Build
        if: success() && matrix.type == 'msbuild'
        run: msbuild win_build\boinc.sln -p:Configuration=${{matrix.configuration}} -p:Platform=${{matrix.platform}} -p:VcpkgTripletConfig=ci -m

      - name: Build CMake
        if: success() && matrix.type == 'libs-cmake'
        run: windows\ci_build_libs_cmake.bat ${{matrix.platform}} ${{matrix.configuration}}

      - name: Run tests
        if: success() && matrix.platform == 'x64' && matrix.type == 'msbuild'
        working-directory: win_build\Build\${{matrix.platform}}\${{matrix.configuration}}
        run: ${{github.workspace}}\temp\OpenCppCoverage\OpenCppCoverage-x64\OpenCppCoverage.exe --cover_children --optimized_build --sources ${{github.workspace}} --export_type=cobertura:cobertura.xml -- unittests.exe --gtest_output=xml:gtest.xml

      - name: Prepare logs on failure
        if: ${{failure()}}
        run: |
          python ./deploy/prepare_deployment.py logs

      - name: Upload logs on failure
        if: ${{failure()}}
        uses: actions/upload-artifact@v3
        with:
          name: windows_logs_${{matrix.type}}_${{github.event.pull_request.head.sha}}
          path: deploy/logs.7z

      - name: Prepare artifacts for deploy
        if: success() && matrix.type == 'msbuild'
        shell: cmd
        run: |
          python deploy\prepare_deployment.py win_apps
          python deploy\prepare_deployment.py win_client
          python deploy\prepare_deployment.py win_manager

      - name: Upload apps
        if: success() && matrix.type == 'msbuild'
        uses: actions/upload-artifact@v3
        with:
          name: win_apps_${{matrix.platform}}_${{github.event.pull_request.head.sha}}
          path: deploy/win_apps.7z

      - name: Upload client
        if: success() && matrix.type == 'msbuild'
        uses: actions/upload-artifact@v3
        with:
          name: win_client_${{matrix.platform}}_${{github.event.pull_request.head.sha}}
          path: deploy/win_client.7z

      - name: Upload manager
        if: success() && matrix.type == 'msbuild'
        uses: actions/upload-artifact@v3
        with:
          name: win_manager_${{matrix.platform}}_${{github.event.pull_request.head.sha}}
          path: deploy/win_manager.7z

      - name: Upload symbol files
        if: success() && matrix.type == 'msbuild'
        uses: actions/upload-artifact@v3
        with:
          name: win_pdb_${{matrix.platform}}_${{github.event.pull_request.head.sha}}
          path: win_build/Build/${{matrix.platform}}/${{matrix.configuration}}/*.pdb

      - name: Upload Google Tests Results
        if: always() && matrix.platform == 'x64' && matrix.type == 'msbuild'
        uses: actions/upload-artifact@v3
        with:
          name: Windows_tests_results
          path: "win_build/Build/${{matrix.platform}}/${{matrix.configuration}}/**/gtest.xml"

      - name: Upload coverage report
        if: success() && matrix.platform == 'x64' && matrix.type == 'msbuild'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          verbose: false
